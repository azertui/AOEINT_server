// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package communication

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloReply struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// * Demande du Client : Demande le déplacement de une ou plusieurs unités
// Argument donné par Client :
//
//* Point : Variable de type coordonnée servant de destination.
//* EntitySelectionUUID : Tableau des identifiants concerné par la requête.
//* Target : Chaine de caractère représentant l'entité qui doit être attaquer.
//Cela peut être :
//** Un identifiant de NPC
//** Un identifiant de batiment
//** Un identifiant de ressource
type RightClickRequest struct {
	Point                *Coordinates `protobuf:"bytes,1,opt,name=Point,proto3" json:"Point,omitempty"`
	EntitySelectionUUID  []string     `protobuf:"bytes,2,rep,name=EntitySelectionUUID,proto3" json:"EntitySelectionUUID,omitempty"`
	Target               string       `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RightClickRequest) Reset()         { *m = RightClickRequest{} }
func (m *RightClickRequest) String() string { return proto.CompactTextString(m) }
func (*RightClickRequest) ProtoMessage()    {}
func (*RightClickRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{2}
}

func (m *RightClickRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RightClickRequest.Unmarshal(m, b)
}
func (m *RightClickRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RightClickRequest.Marshal(b, m, deterministic)
}
func (m *RightClickRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RightClickRequest.Merge(m, src)
}
func (m *RightClickRequest) XXX_Size() int {
	return xxx_messageInfo_RightClickRequest.Size(m)
}
func (m *RightClickRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RightClickRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RightClickRequest proto.InternalMessageInfo

func (m *RightClickRequest) GetPoint() *Coordinates {
	if m != nil {
		return m.Point
	}
	return nil
}

func (m *RightClickRequest) GetEntitySelectionUUID() []string {
	if m != nil {
		return m.EntitySelectionUUID
	}
	return nil
}

func (m *RightClickRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

// * Reponse du Serveur : Un message vide
// Argument donné par Serveur :  Aucun, pas d'information dans le message
type RightClickReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RightClickReply) Reset()         { *m = RightClickReply{} }
func (m *RightClickReply) String() string { return proto.CompactTextString(m) }
func (*RightClickReply) ProtoMessage()    {}
func (*RightClickReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{3}
}

func (m *RightClickReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RightClickReply.Unmarshal(m, b)
}
func (m *RightClickReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RightClickReply.Marshal(b, m, deterministic)
}
func (m *RightClickReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RightClickReply.Merge(m, src)
}
func (m *RightClickReply) XXX_Size() int {
	return xxx_messageInfo_RightClickReply.Size(m)
}
func (m *RightClickReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RightClickReply.DiscardUnknown(m)
}

var xxx_messageInfo_RightClickReply proto.InternalMessageInfo

// * X : Entier de 32 bits donnant la composante x de la coordonnée sur le carte
// Y : Entier de 32 bits donnant la composante y de la coordonnée sur le carte
type Coordinates struct {
	X                    float32  `protobuf:"fixed32,1,opt,name=X,proto3" json:"X,omitempty"`
	Y                    float32  `protobuf:"fixed32,2,opt,name=Y,proto3" json:"Y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Coordinates) Reset()         { *m = Coordinates{} }
func (m *Coordinates) String() string { return proto.CompactTextString(m) }
func (*Coordinates) ProtoMessage()    {}
func (*Coordinates) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{4}
}

func (m *Coordinates) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Coordinates.Unmarshal(m, b)
}
func (m *Coordinates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Coordinates.Marshal(b, m, deterministic)
}
func (m *Coordinates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coordinates.Merge(m, src)
}
func (m *Coordinates) XXX_Size() int {
	return xxx_messageInfo_Coordinates.Size(m)
}
func (m *Coordinates) XXX_DiscardUnknown() {
	xxx_messageInfo_Coordinates.DiscardUnknown(m)
}

var xxx_messageInfo_Coordinates proto.InternalMessageInfo

func (m *Coordinates) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Coordinates) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// * Demande du Client : Demande les actions qui ont été signaler au serveur pour mettre à jour le client.
// Argument donné par Client :
//* Token : Suite de caractère permettant d'identifier et authentifier le client au près du serveur
type AskUpdateRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AskUpdateRequest) Reset()         { *m = AskUpdateRequest{} }
func (m *AskUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*AskUpdateRequest) ProtoMessage()    {}
func (*AskUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{5}
}

func (m *AskUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AskUpdateRequest.Unmarshal(m, b)
}
func (m *AskUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AskUpdateRequest.Marshal(b, m, deterministic)
}
func (m *AskUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AskUpdateRequest.Merge(m, src)
}
func (m *AskUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_AskUpdateRequest.Size(m)
}
func (m *AskUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AskUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AskUpdateRequest proto.InternalMessageInfo

func (m *AskUpdateRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// * Reponse du Serveur : Message contenant un tableau des actions * signaler au serveur
// Argument donné par Serveur :
//* Array : Tableau contenant les actions entreprissent depuis la dernière mise à jour
//* Type : Type de l'action décrite dans la suite du message (entier)
//* EntityUUID : Entité designé par l'action décrite (string)
//* Arg : Tableau d'argument variable lié au type d'action
//* Key : Nom de la valeur (string)
//* Value : Valeur lié à la clé (string)
type AskUpdateReply struct {
	// Si vide rien
	Array                []*UpdateAsked `protobuf:"bytes,1,rep,name=Array,proto3" json:"Array,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AskUpdateReply) Reset()         { *m = AskUpdateReply{} }
func (m *AskUpdateReply) String() string { return proto.CompactTextString(m) }
func (*AskUpdateReply) ProtoMessage()    {}
func (*AskUpdateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{6}
}

func (m *AskUpdateReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AskUpdateReply.Unmarshal(m, b)
}
func (m *AskUpdateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AskUpdateReply.Marshal(b, m, deterministic)
}
func (m *AskUpdateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AskUpdateReply.Merge(m, src)
}
func (m *AskUpdateReply) XXX_Size() int {
	return xxx_messageInfo_AskUpdateReply.Size(m)
}
func (m *AskUpdateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AskUpdateReply.DiscardUnknown(m)
}

var xxx_messageInfo_AskUpdateReply proto.InternalMessageInfo

func (m *AskUpdateReply) GetArray() []*UpdateAsked {
	if m != nil {
		return m.Array
	}
	return nil
}

//
// 0 : Création d'un NPC
//* EntityUUID : Identifiant de l'entité créé
//* Arg :
//** Key :
//- "pv" -> Point de vie
//- "x" -> Coordonnée x
//- "y" -> Coordonnée y
//- "px" -> float64 coordonnée X
//- "py" -> float64 coordonnée y
//- "vitesse" -> Vitesse de déplacement
//- "type" -> Type de NPC (0:villager | 1:harvester | 2:soldier)
//- "damage" -> Dégats qu'inflige le NPC
//- "vue" -> Distance de vue du NPC
//- "portee" -> Distance de la portée d'attaque
//- "PlayerUUID" -> UUID du joueur propriétaire
//** Value : Valeur en fonction de la donnée
//
// 1 : Destruction d'un NPC
//* EntityUUID : Identifiant de l'entité concernée
//* Arg : Vide/A ne pas prendre en compte
//
// 2 : Modification d'un NPC
//* EntityUUID : Identifiant de l'entité concerné
//* Arg :
//** Key :
//- "pv" -> Point de vie
//- "x" -> Coordonnée x float64
//- "y" -> Coordonnée y float64
//- "destX" -> Destination coordonnée x (-1 si pas de chemin) float64
//- "destY" -> Destination coordonnée y (-1 si pas de chemin) float64
//- "vitesse" -> Vitesse de déplacement
//- "type" ->Type du NPC (0:villager | 1:harvester | 2:soldier)
//- "damage" -> Dégats prit par le NPC
//- "vue" -> Distance de vue du NPC
//- "portee" -> Distance de la portée d'attaque
//** Value : Valeur en fonction de la donnée
//
// 3 : Mise à jour des ressource d'un joueur
//* EntityUUID : Identifiant du joueur concerné
//* Arg :
//** Key :
//- "nom" -> nom du joueur
//- "faction" -> équipe (int) du joueur
//- "uid" -> UUID du joueur
//- "stone" -> nombre de la ressource possédée
//- "wood" -> idem
//- "food" -> idem
//** Value : -
//
// 4 : Endommagement d'une ressource
//* EntityUUID : Coordonnée de la ressource concerné
//* Arg :
//** Key :
//- "x" -> Coordonnée X
//- "y" -> Coordonnée Y
//- "pv" -> Nouveau PV
//- "type" -> type de la ressource
//- "id" -> id de laressource
//** Value : Valeur en fonction de la donnée
//
// 5 : Destruction d'une ressource
//* EntityUUID : Coordonnée de la ressource concerné
//* Arg :
//** Key :
//- "x" -> Coordonnée X
//- "y" -> Coordonnée Y
//- "id" -> id de la ressource
//** Value : Valeur en fonction de la donnée
//
// 6 : Création d'une ressource
//* EntityUUID : id de la ressource concerné
//* Arg :
//** Key :
//- "x" -> Coordonnée X
//- "y" -> Coordonnée Y
//- "pv" -> PV
//- "type" -> "0"->Eau | "1"->Bois | "2"->Pierre | "3"->Nourriture
//- "id" -> ID
//** Value : Valeur en fonction de la donnée
//
// 7 : Endommagement d'un bâtiment
//* EntityUUID : Identifiant du bâtiment concerné
//* Arg :
//** Key :
//- "pv" -> Nouveau PV
//- "id" -> id batiment
//- "PlayerUUID" -> id joueur propriétaire
//** Value : Valeur en fonction de la donnée
//
// 8 : Destruction d'un bâtiment
//* EntityUUID : Identifiant du bâtiment concerné
//* Arg : Vide
//
// 9 : Création d'un bâtiment
//* EntityUUID : Identifiant du bâtiment concerné
//* Arg :
//** Key :
//- "x" -> Coordonnée X
//- "y" -> Coordonnée Y
//- "pv" -> PV
//- "type" -> Type
//- "PlayerUUID" -> PlayerUUID
//- "id" -> id batiment
//** Value : Valeur en fonction de la donnée
//
// 10 : Fin du jeu
//* EntityUUID : Vide
//* Arg : Vide
type UpdateAsked struct {
	Type                 int32    `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	EntityUUID           string   `protobuf:"bytes,2,opt,name=EntityUUID,proto3" json:"EntityUUID,omitempty"`
	Arg                  []*Param `protobuf:"bytes,3,rep,name=Arg,proto3" json:"Arg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAsked) Reset()         { *m = UpdateAsked{} }
func (m *UpdateAsked) String() string { return proto.CompactTextString(m) }
func (*UpdateAsked) ProtoMessage()    {}
func (*UpdateAsked) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{7}
}

func (m *UpdateAsked) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAsked.Unmarshal(m, b)
}
func (m *UpdateAsked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAsked.Marshal(b, m, deterministic)
}
func (m *UpdateAsked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAsked.Merge(m, src)
}
func (m *UpdateAsked) XXX_Size() int {
	return xxx_messageInfo_UpdateAsked.Size(m)
}
func (m *UpdateAsked) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAsked.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAsked proto.InternalMessageInfo

func (m *UpdateAsked) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UpdateAsked) GetEntityUUID() string {
	if m != nil {
		return m.EntityUUID
	}
	return ""
}

func (m *UpdateAsked) GetArg() []*Param {
	if m != nil {
		return m.Arg
	}
	return nil
}

type Param struct {
	Key                  string   `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Param) Reset()         { *m = Param{} }
func (m *Param) String() string { return proto.CompactTextString(m) }
func (*Param) ProtoMessage()    {}
func (*Param) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{8}
}

func (m *Param) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Param.Unmarshal(m, b)
}
func (m *Param) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Param.Marshal(b, m, deterministic)
}
func (m *Param) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Param.Merge(m, src)
}
func (m *Param) XXX_Size() int {
	return xxx_messageInfo_Param.Size(m)
}
func (m *Param) XXX_DiscardUnknown() {
	xxx_messageInfo_Param.DiscardUnknown(m)
}

var xxx_messageInfo_Param proto.InternalMessageInfo

func (m *Param) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Param) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "communication.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "communication.HelloReply")
	proto.RegisterType((*RightClickRequest)(nil), "communication.RightClickRequest")
	proto.RegisterType((*RightClickReply)(nil), "communication.RightClickReply")
	proto.RegisterType((*Coordinates)(nil), "communication.Coordinates")
	proto.RegisterType((*AskUpdateRequest)(nil), "communication.AskUpdateRequest")
	proto.RegisterType((*AskUpdateReply)(nil), "communication.AskUpdateReply")
	proto.RegisterType((*UpdateAsked)(nil), "communication.UpdateAsked")
	proto.RegisterType((*Param)(nil), "communication.Param")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x49, 0x43, 0x56, 0x64, 0x5a, 0x60, 0xd7, 0xac, 0x50, 0x08, 0x62, 0x89, 0x7c, 0x40,
	0xe5, 0x52, 0xaa, 0xf2, 0x04, 0xa1, 0x45, 0xa2, 0x42, 0x45, 0x95, 0xdb, 0xa2, 0xf6, 0x68, 0x52,
	0xab, 0x58, 0xf9, 0xe3, 0xe0, 0xb8, 0x87, 0x3c, 0x05, 0x8f, 0xc2, 0x2b, 0x22, 0xdb, 0x29, 0x84,
	0x10, 0xb8, 0xcd, 0xd8, 0xbf, 0xcc, 0xcc, 0x37, 0x9f, 0x03, 0xbe, 0x2c, 0x93, 0x49, 0x29, 0x85,
	0x12, 0xe8, 0x61, 0x22, 0xf2, 0xfc, 0x5c, 0xf0, 0x84, 0x2a, 0x2e, 0x0a, 0x8c, 0x61, 0xf4, 0x81,
	0x65, 0x99, 0x20, 0xec, 0xdb, 0x99, 0x55, 0x0a, 0x21, 0xb8, 0xff, 0x89, 0xe6, 0x2c, 0x70, 0x22,
	0x67, 0xec, 0x13, 0x13, 0xe3, 0x08, 0xa0, 0x61, 0xca, 0xac, 0xee, 0x25, 0xbe, 0x3b, 0x70, 0x43,
	0xf8, 0xe9, 0xab, 0x9a, 0x67, 0x3c, 0x49, 0x2f, 0xb5, 0xa6, 0xe0, 0xad, 0x05, 0x2f, 0x94, 0x41,
	0x87, 0xb3, 0x70, 0xf2, 0x47, 0xeb, 0xc9, 0x5c, 0x08, 0x79, 0xe4, 0x05, 0x55, 0xac, 0x22, 0x16,
	0x44, 0x53, 0x78, 0xf2, 0xbe, 0x50, 0x5c, 0xd5, 0x1b, 0x96, 0xb1, 0x44, 0x53, 0xbb, 0xdd, 0x72,
	0x11, 0x0c, 0x22, 0x77, 0xec, 0x93, 0xbe, 0x2b, 0xf4, 0x14, 0xae, 0xb6, 0x54, 0x9e, 0x98, 0x0a,
	0x5c, 0x33, 0x4f, 0x93, 0xe1, 0x1b, 0x78, 0xdc, 0x1e, 0xa8, 0xcc, 0x6a, 0xfc, 0x1a, 0x86, 0xad,
	0x96, 0x68, 0x04, 0xce, 0xde, 0x4c, 0x36, 0x20, 0xce, 0x5e, 0x67, 0x87, 0x60, 0x60, 0xb3, 0x03,
	0x1e, 0xc3, 0x75, 0x5c, 0xa5, 0xbb, 0xf2, 0x48, 0x15, 0xbb, 0xa8, 0xb9, 0x05, 0x6f, 0x2b, 0x52,
	0x56, 0x34, 0xc2, 0x6d, 0x82, 0xdf, 0xc1, 0xa3, 0x16, 0xa9, 0xf7, 0x33, 0x05, 0x2f, 0x96, 0x92,
	0xd6, 0x81, 0x13, 0xb9, 0x3d, 0xaa, 0x2d, 0x1a, 0x57, 0x29, 0x3b, 0x12, 0x0b, 0x62, 0x0e, 0xc3,
	0xd6, 0xa9, 0x5e, 0xf0, 0xb6, 0x2e, 0xed, 0x82, 0x3d, 0x62, 0x62, 0x74, 0x07, 0x60, 0xd5, 0x37,
	0xfb, 0xd0, 0x13, 0xb4, 0x4e, 0xd0, 0x2b, 0x70, 0x63, 0x79, 0x0a, 0x5c, 0xd3, 0xf2, 0xb6, 0xd3,
	0x72, 0x4d, 0x25, 0xcd, 0x89, 0x06, 0xf0, 0x1b, 0xf0, 0x4c, 0x86, 0xae, 0xc1, 0xfd, 0xc8, 0xea,
	0x46, 0x8b, 0x0e, 0xb5, 0xbe, 0xcf, 0x34, 0x3b, 0xb3, 0xa6, 0xba, 0x4d, 0x66, 0x2b, 0xf0, 0x8c,
	0xf7, 0x68, 0x01, 0x0f, 0x36, 0xb4, 0xb6, 0xf1, 0xf3, 0x4e, 0x83, 0xf6, 0x0b, 0x0a, 0x9f, 0xf5,
	0x5f, 0x6a, 0x07, 0xee, 0xcd, 0x7e, 0x38, 0x30, 0x5a, 0x16, 0x8a, 0x49, 0x6a, 0x2c, 0xac, 0xd0,
	0x1a, 0xe0, 0xb7, 0x4f, 0x28, 0xea, 0x7c, 0xfb, 0xd7, 0x9b, 0x0a, 0xef, 0xfe, 0x43, 0x98, 0x16,
	0x68, 0x05, 0xfe, 0x2f, 0x47, 0xd0, 0xcb, 0x0e, 0xde, 0x75, 0x35, 0x7c, 0xf1, 0x6f, 0xc0, 0x94,
	0xfb, 0x72, 0x65, 0x7e, 0x9b, 0xb7, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x90, 0x41, 0xc7, 0xbc,
	0x43, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloClient interface {
	// Fonction servant juste au test de connection
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type helloClient struct {
	cc *grpc.ClientConn
}

func NewHelloClient(cc *grpc.ClientConn) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/communication.Hello/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloServer is the server API for Hello service.
type HelloServer interface {
	// Fonction servant juste au test de connection
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterHelloServer(s *grpc.Server, srv HelloServer) {
	s.RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Hello/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "communication.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Hello_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// InteractionsClient is the client API for Interactions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InteractionsClient interface {
	// Fonction transmettant un click du client au serveur
	RightClick(ctx context.Context, in *RightClickRequest, opts ...grpc.CallOption) (*RightClickReply, error)
	// Fonction permettant au client de demander les mises à jour
	AskUpdate(ctx context.Context, in *AskUpdateRequest, opts ...grpc.CallOption) (*AskUpdateReply, error)
}

type interactionsClient struct {
	cc *grpc.ClientConn
}

func NewInteractionsClient(cc *grpc.ClientConn) InteractionsClient {
	return &interactionsClient{cc}
}

func (c *interactionsClient) RightClick(ctx context.Context, in *RightClickRequest, opts ...grpc.CallOption) (*RightClickReply, error) {
	out := new(RightClickReply)
	err := c.cc.Invoke(ctx, "/communication.Interactions/RightClick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionsClient) AskUpdate(ctx context.Context, in *AskUpdateRequest, opts ...grpc.CallOption) (*AskUpdateReply, error) {
	out := new(AskUpdateReply)
	err := c.cc.Invoke(ctx, "/communication.Interactions/AskUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractionsServer is the server API for Interactions service.
type InteractionsServer interface {
	// Fonction transmettant un click du client au serveur
	RightClick(context.Context, *RightClickRequest) (*RightClickReply, error)
	// Fonction permettant au client de demander les mises à jour
	AskUpdate(context.Context, *AskUpdateRequest) (*AskUpdateReply, error)
}

func RegisterInteractionsServer(s *grpc.Server, srv InteractionsServer) {
	s.RegisterService(&_Interactions_serviceDesc, srv)
}

func _Interactions_RightClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RightClickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionsServer).RightClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Interactions/RightClick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionsServer).RightClick(ctx, req.(*RightClickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interactions_AskUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionsServer).AskUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Interactions/AskUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionsServer).AskUpdate(ctx, req.(*AskUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Interactions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "communication.Interactions",
	HandlerType: (*InteractionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RightClick",
			Handler:    _Interactions_RightClick_Handler,
		},
		{
			MethodName: "AskUpdate",
			Handler:    _Interactions_AskUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
